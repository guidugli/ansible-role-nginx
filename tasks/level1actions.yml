---

- name: Set /etc/nginx/nginx.conf file
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0640'
    backup: true
  notify: Reload nginx configuration

- name: Delete default site
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Set /etc/nginx/options-ssl-nginx.conf file
  ansible.builtin.template:
    src: options-ssl-nginx.conf.j2
    dest: /etc/nginx/options-ssl-nginx.conf
    owner: root
    group: root
    mode: '0640'
    backup: true
  notify: Reload nginx configuration

- name: Default security certificates
  ansible.builtin.blockinfile:
    path: /etc/nginx/conf.d/00_default_cert.conf
    block: |
      ssl_certificate {{ nginx_ssl_certificate }}
      ssl_certificate_key {{ nginx_ssl_certificate_key }}
  notify: Reload nginx configuration
  when:
    - nginx_ssl_certificate is defined
    - nginx_ssl_certificate_key is defined

- name: Remove default security certs if not defined
  ansible.builtin.file:
    path: /etc/nginx/conf.d/00_default_cert.conf
    state: absent
  notify: Reload nginx configuration
  when: nginx_ssl_certificate is not defined or nginx_ssl_certificate_key is not defined

- name: Copy configuration files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/nginx/conf.d/{{ item }}"
    owner: root
    group: root
    mode: '0640'
  notify: Reload nginx configuration
  loop:
    - "00_log.conf"
    - "01_default_site.conf"

- name: Copy user defined configuration files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/nginx/conf.d/{{ item }}"
    owner: root
    group: root
    mode: '0640'
  notify: Reload nginx configuration
  loop: "{{ nginx_site_files | default([]) }}"


- name: Create /etc/nginx/ssl directory
  ansible.builtin.file:
    path: /etc/nginx/ssl
    state: directory
    mode: '0750'
    owner: root
    group: root
    modification_time: preserve
    access_time: preserve

- name: Copy dummy certificates for default site
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/nginx/ssl/{{ item }}"
    owner: root
    group: root
    mode: '0440'
  loop:
    - "nginx.crt"
    - "nginx.key"

- name: Add proxy configuration
  vars:
    domain: "{{ item.server_name | regex_search('^[^.]+\\.(.*)','\\1') | first | regex_escape() }}"
    escaped_domain: "^[^.]+\\.{{ domain }}"
  ansible.builtin.template:
    src: proxy_config.j2
    dest: "/etc/nginx/conf.d/10_{{ item.name }}.conf"
    owner: root
    group: root
    mode: '0640'
    backup: true
  loop: "{{ nginx_proxy_sites | default([]) }}"
  notify: Reload nginx configuration

# The autoindex module processes requests ending with the slash character. This
# feature enables directory listing, which could be useful in attacker
# reconnaissance, so it should be disabled.
- name: Ensure the autoindex module is disabled
  ansible.builtin.shell: egrep -i '^\s*autoindex\s+' /etc/nginx/nginx.conf /etc/nginx/conf.d/*
  register: nginx_cmd_result
  changed_when: false
  failed_when: nginx_cmd_result.rc == 0

# Ensuring a non-privileged, dedicated service account is used is a defense in
# depth measure to limit what an attacker who compromises the account can do.
#- name: Ensure NGINX is run using a non-privileged, dedicated service account
#  shell: |
#    set -o pipefail
#    grep "user[^;]*;" /etc/nginx/nginx.conf | awk '{ print $2 }' | tr -d ';'
#  args:
#    executable: /bin/bash
#  register: nginx_cmd_result
#  failed_when: nginx_cmd_result.rc != 0

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Check if sudo is installed
  ansible.builtin.setfact:
    nginx_is_sudo_installed: "{{ 'sudo' in ansible_facts.packages }}"

- name: Verify the nginx dedicated user is not privileged
  ansible.builtin.command: "sudo -l -U {{ nginx_username }}"
  register: nginx_cmd_result
  failed_when: nginx_cmd_result.rc != 0 or
               "is not allowed to run sudo" not in nginx_cmd_result.stdout
  changed_when: false
  when: nginx_is_sudo_installed

- name: Verify the nginx dedicated user is not part of any unexpected groups
  ansible.builtin.shell: |
    set -o pipefail
    groups {{ nginx_username }} | awk '{ for (i=3; i<=NF; i++) print $i }'
  args:
    executable: /bin/bash
  register: nginx_cmd_result
  failed_when: nginx_cmd_result.rc != 0 or
               (nginx_cmd_result.stdout_lines | length > 1) or
               nginx_cmd_result.stdout != nginx_username
  changed_when: false

- name: Ensure the NGINX service account has an invalid shell
  ansible.builtin.shell: |
    set -o pipefail
    S=`grep {{ nginx_username }} /etc/passwd | cut -d: -f7`
    [ "$S" == "/usr/sbin/nologin" -o "$S" = "/sbin/nologin" ]
  args:
    executable: /bin/bash
  register: nginx_cmd_result
  failed_when: nginx_cmd_result.rc != 0
  changed_when: false

- name: Ensure the NGINX service account is locked
  ansible.builtin.user:
    name: "{{ nginx_username }}"
    password_lock: true
    password: '*'

- name: Ensure NGINX directory is owned by root and is 0750
  ansible.builtin.file:
    path: /etc/nginx
    owner: root
    group: root
    mode: '0750'

- name: Check if directories need to have the permissions changed
  ansible.builtin.command: find /etc/nginx -xdev -type d \( -perm -o+x -o -perm -o+r \)
  register: nginx_cmd_result
  failed_when: false
  changed_when: false

- name: Fix directories permissions
  ansible.builtin.shell: |
    set -o pipefail
    find /etc/nginx -type d | xargs chmod 750
  args:
    executable: /bin/bash
  register: nginx_cmd_result
  failed_when: nginx_cmd_result.rc != 0
  changed_when: true
  when: (nginx_cmd_result.stdout_lines | default([])) | length > 0

- name: Check if files need to have the permissions changed
  ansible.builtin.command:
    find /etc/nginx -xdev -type f \( -perm -o+x -o -perm -o+r -o -perm -o+w \)
  register: nginx_cmd_result
  failed_when: false
  changed_when: false

- name: Fix files permissions
  ansible.builtin.shell: |
    set -o pipefail
    find /etc/nginx -type f | xargs chmod 640
  args:
    executable: /bin/bash
  register: nginx_cmd_result
  failed_when: nginx_cmd_result.rc != 0
  changed_when: true
  when: (nginx_cmd_result.stdout_lines | default([])) | length > 0

- name: Ensure NGINX pid file is owned by root
  ansible.builtin.file:
    path: /var/run/nginx.pid
    owner: root
    group: root
    mode: '0644'

- name: Check if working_directory is set
  ansible.builtin.shell: |
    set -o pipefail
    grep working_directory /etc/nginx/nginx.conf | awk '{print $2}' | tr -d ';'
  args:
    executable: /bin/bash
  register: nginx_cmd_result
  failed_when: false
  changed_when: false

- name: If working_directory is set, ensure owner and permissions are correct
  ansible.builtin.file:
    path: "{{ nginx_cmd_result.stdout }}"
    owner: root
    group: "{{ nginx_username }}"
    mode: '0770'
  when: nginx_cmd_result.stdout | length > 0
